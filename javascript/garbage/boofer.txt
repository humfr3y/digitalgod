Спасибо за покупку! Теперь ваше первое улучшение умножено на x" + mboost.toFixed(1) + "! Следующая покупка стоит " + (multiprice+100) + " долларов!" //текст для мб

console.log(money + ".db " + db + ". mb " + mb + ". multip " + multiprice + ". mamount" + mamount + ". mboost" + mboost) //дебаг мб

function removenot()
{
    notification.innerHTML = ""
};

function notifyme(){
if (data) {notification.innerHTML = "Игра сохранена"}
else {notification.innerHTML = "Game saved"};

}

box-shadow: 0 0 10px #fff;

α


    if (data) {coinsCount.innerHTML = money.toFixed(0) + " α-монет.";}
    else {coinsCount.innerHTML = money.toFixed(0) + " α-coins.";}}

    ff




    const ach11 = document.querySelector('#ach11');
const tooltip = document.querySelector('#tooltip');

const popperInstance = Popper.createPopper(ach11, tooltip, {
  modifiers: [
    {
      name: 'offset',
      options: {
        offset: [0, 8],
      },
    },
  ],
  placement: 'top',
});

function show() {
  // Make the tooltip visible
  tooltip.setAttribute('data-show', '');

  // Enable the event listeners
  popperInstance.setOptions((options) => ({
    ...options,
    modifiers: [
      ...options.modifiers,
      { name: 'eventListeners', enabled: true },
    ],
  }));

  // Update its position
  popperInstance.update();
}

function hide() {
  // Hide the tooltip
  tooltip.removeAttribute('data-show');

  // Disable the event listeners
  popperInstance.setOptions((options) => ({
    ...options,
    modifiers: [
      ...options.modifiers,
      { name: 'eventListeners', enabled: false },
    ],
  }));
}

const showEvents = ['mouseenter', 'focus'];
const hideEvents = ['mouseleave', 'blur'];

showEvents.forEach((event) => {
    ach11.addEventListener(event, show);
});

hideEvents.forEach((event) => {
    ach11.addEventListener(event, hide);
});

    // firstSingle.amount = parseFloat(parsedData.firstSingle_amount);
    // firstSingle.baseEffect = parseFloat(parsedData.firstSingle_baseEffect);
    // secondSingle.amount = parseFloat(parsedData.secondSingle_amount);
    // secondSingle.baseEffect = parseFloat(parsedData.secondSingle_baseEffect);
    // thirdSingle.amount = parseFloat(parsedData.thirdSingle_amount);
    // thirdSingle.baseEffect = parseFloat(parsedData.thirdSingle_baseEffect);
    // fourthSingle.amount = parseFloat(parsedData.fourthSingle_amount);
    // fourthSingle.baseEffect = parseFloat(parsedData.fourthSingle_baseEffect);
    // fifthSingle.amount = parseFloat(parsedData.fifthSingle_amount);
    // fifthSingle.baseEffect = parseFloat(parsedData.fifthSingle_baseEffect);
    // sixthSingle.amount = parseFloat(parsedData.sixthSingle_amount);
    // sixthSingle.baseEffect = parseFloat(parsedData.sixthSingle_baseEffect);
    // seventhSingle.amount = parseFloat(parsedData.seventhSingle_amount);
    // seventhSingle.baseEffect = parseFloat(parsedData.seventhSingle_baseEffect);
    // eighthSingle.amount = parseFloat(parsedData.eighthSingle_amount);
    // eighthSingle.baseEffect = parseFloat(parsedData.eighthSingle_baseEffect);
    // ninthSingle.amount = parseFloat(parsedData.ninthSingle_amount);
    // ninthSingle.baseEffect = parseFloat(parsedData.ninthSingle_baseEffect);
    // tenthSingle.amount = parseFloat(parsedData.tenthSingle_amount);
    // tenthSingle.baseEffect = parseFloat(parsedData.tenthSingle_baseEffect);